buildscript {
    ext {
        osName = System.getProperty("os.name").toLowerCase()
        isLinux = osName.contains("linux")
        isWindows = osName.contains("windows")
        is64 = System.getProperty("sun.arch.data.model") == "64"
        isLinux64 = isLinux && is64
        isWindows64 = isWindows && is64
    }

}

apply plugin: 'com.android.application'
apply plugin: 'io.objectbox'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.sundeep.offline_ether"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue 'string', 'etherScanHost', '"api.etherscan.io"'
        }
        debug {
            resValue 'string', 'etherScanHost', '"rinkeby.etherscan.io"'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        dependencies {
            implementation fileTree(include: ['*.jar'], dir: 'libs')
            implementation 'com.android.support:appcompat-v7:26.1.0'
            implementation 'com.android.support.constraint:constraint-layout:1.0.2'
            implementation 'com.android.support:design:26.1.0'


            compile 'com.google.dagger:dagger:2.13'
            compile 'com.google.dagger:dagger-android-support:2.13'
            annotationProcessor 'com.google.dagger:dagger-compiler:2.13'
            annotationProcessor 'com.google.dagger:dagger-android-processor:2.13'

            compile 'javax.inject:javax.inject:1'
            compile 'com.android.support:cardview-v7:26.1.0'
            compile 'com.android.support:recyclerview-v7:26.1.0'
            compile "io.objectbox:objectbox-android:$objectboxVersion"
            compile 'me.dm7.barcodescanner:zxing:1.9.8'
            compile 'com.google.guava:guava:23.6-android'
            compile 'com.squareup.okhttp3:okhttp:3.9.1'
            compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
            compile 'io.reactivex.rxjava2:rxjava:2.1.7'
            compile 'com.squareup.moshi:moshi:1.5.0'
            compile 'com.github.medyo:fancybuttons:1.8.4'
            compile 'com.facebook.shimmer:shimmer:0.1.0@aar'
            annotationProcessor "io.objectbox:objectbox-processor:$objectboxVersion"

            testImplementation 'junit:junit:4.12'
            androidTestImplementation 'com.android.support.test:runner:1.0.1'
            androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
            androidTestCompile "com.android.support.test.espresso:espresso-intents:3.0.1"
            androidTestCompile 'org.mockito:mockito-android:2.7.15'
            testCompile 'org.mockito:mockito-core:2.7.15'
            testCompile 'junit:junit:4.12'

            if (isLinux64) {
                compile "io.objectbox:objectbox-linux:$objectboxVersion"
            } else if (isWindows64) {
                compile "io.objectbox:objectbox-windows:$objectboxVersion"
            } else println("Native dependency could not be set up for unsupported OS: " + osName)


        }
    }
}

